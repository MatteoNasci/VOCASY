<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VOCASY</name>
    </assembly>
    <members>
        <member name="T:VOCASY.AudioDataTypeFlag">
            <summary>
            Flag that determines several types of data format
            </summary>
        </member>
        <member name="F:VOCASY.AudioDataTypeFlag.None">
            <summary>
            No flag set
            </summary>
        </member>
        <member name="F:VOCASY.AudioDataTypeFlag.Int16">
            <summary>
            Uses data stored in Int16 format
            </summary>
        </member>
        <member name="F:VOCASY.AudioDataTypeFlag.Single">
            <summary>
            Uses data stored in single precision point format
            </summary>
        </member>
        <member name="F:VOCASY.AudioDataTypeFlag.Both">
            <summary>
            Uses both Int16 and Single formats
            </summary>
        </member>
        <member name="T:VOCASY.Common.Receiver">
            <summary>
            Class that manages voice audio output, compatible with all data formats and frequency/channels
            </summary>
        </member>
        <member name="F:VOCASY.Common.Receiver.OutputBaseFrequency">
            <summary>
            Output frequency
            </summary>
        </member>
        <member name="F:VOCASY.Common.Receiver.OutputBaseFrequencyInverse">
            <summary>
            Output inverse frequency
            </summary>
        </member>
        <member name="F:VOCASY.Common.Receiver.OutputBaseChannels">
            <summary>
            Output channels
            </summary>
        </member>
        <member name="P:VOCASY.Common.Receiver.Volume">
            <summary>
            Volume specific for this output source
            </summary>
        </member>
        <member name="P:VOCASY.Common.Receiver.AvailableTypes">
            <summary>
            Flag that determines which types of data format this class can process
            </summary>
        </member>
        <member name="M:VOCASY.Common.Receiver.ReceiveAudioData(System.Byte[],System.Int32,System.Int32,VOCASY.VoicePacketInfo)">
            <summary>
            Processes audio data in format Int16 and plays it
            </summary>
            <param name="audioData">audio data to process</param>
            <param name="audioDataOffset">audio data start index</param>
            <param name="audioDataCount">audio data amount to process</param>
            <param name="info">data info</param>
        </member>
        <member name="M:VOCASY.Common.Receiver.ReceiveAudioData(System.Single[],System.Int32,System.Int32,VOCASY.VoicePacketInfo)">
            <summary>
            Processes audio data in format Single and plays it
            </summary>
            <param name="audioData">audio data to process</param>
            <param name="audioDataOffset">audio data start index</param>
            <param name="audioDataCount">audio data amount to process</param>
            <param name="info">data info</param>
        </member>
        <member name="T:VOCASY.Common.SelfDataTransport">
            <summary>
            Class that fakes network state between self and another client. It should be used for tests and debug
            </summary>
        </member>
        <member name="F:VOCASY.Common.SelfDataTransport.FirstPacketByteAvailable">
            <summary>
            Header size
            </summary>
        </member>
        <member name="F:VOCASY.Common.SelfDataTransport.pLength">
            <summary>
            Max final packet length
            </summary>
        </member>
        <member name="P:VOCASY.Common.SelfDataTransport.MaxDataLength">
            <summary>
            Max data length that should be sent to this class
            </summary>
        </member>
        <member name="F:VOCASY.Common.SelfDataTransport.ReceiverId">
            <summary>
            To which id fake packets should be sent
            </summary>
        </member>
        <member name="M:VOCASY.Common.SelfDataTransport.ProcessReceivedData(GENUtility.BytePacket,System.Byte[],System.Int32,System.Int32,System.UInt64)">
            <summary>
            Process packet data
            </summary>
            <param name="buffer">GamePacket of which data will be stored</param>
            <param name="dataReceived">Raw data received from network</param>
            <param name="startIndex">Raw data start index</param>
            <param name="length">Raw data length</param>
            <param name="netId">Sender net id</param>
            <returns>data info</returns>
        </member>
        <member name="M:VOCASY.Common.SelfDataTransport.SendToAllOthers(GENUtility.BytePacket,VOCASY.VoicePacketInfo)">
            <summary>
            Sends a packet to all the other clients that need it
            </summary>
            <param name="data">GamePacket that stores the data to send</param>
            <param name="info">data info</param>
        </member>
        <member name="M:VOCASY.Common.SelfDataTransport.SendTo(GENUtility.BytePacket,VOCASY.VoicePacketInfo,System.UInt64)">
            <summary>
            Performs a normal SendToAllOthers
            </summary>
            <param name="data">GamePacket that stores the data to send</param>
            <param name="info">data info</param>
            <param name="receiverID">Receiver to which the packet should be sent</param>
        </member>
        <member name="T:VOCASY.Common.Recorder">
            <summary>
            Class that records mic data using Unity API
            </summary>
        </member>
        <member name="P:VOCASY.Common.Recorder.AvailableTypes">
            <summary>
            Flag that determines which types of data format this class can process
            </summary>
        </member>
        <member name="P:VOCASY.Common.Recorder.IsEnabled">
            <summary>
            Is this input disabled?
            </summary>
        </member>
        <member name="P:VOCASY.Common.Recorder.MicDataAvailable">
            <summary>
            Amount of mic data recorded currently available
            </summary>
        </member>
        <member name="F:VOCASY.Common.Recorder.Settings">
            <summary>
            Voice chat settings
            </summary>
        </member>
        <member name="M:VOCASY.Common.Recorder.GetMicData(System.Single[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets recorded data and stores it in format Single
            </summary>
            <param name="buffer">buffer to fill with audio data recorded</param>
            <param name="bufferOffset">buffer start index</param>
            <param name="dataCount">amount of data to store</param>
            <param name="effectiveDataCount">effective amount of data stored</param>
            <returns>data info</returns>
        </member>
        <member name="M:VOCASY.Common.Recorder.GetMicData(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets recorded data and stores it in format Int16
            </summary>
            <param name="buffer">buffer to fill with audio data recorded</param>
            <param name="bufferOffset">buffer start index</param>
            <param name="dataCount">amount of data to store</param>
            <param name="effectiveDataCount">effective amount of data stored</param>
            <returns>data info</returns>
        </member>
        <member name="M:VOCASY.Common.Recorder.StopRecording">
            <summary>
            Stops recording
            </summary>
        </member>
        <member name="M:VOCASY.Common.Recorder.StartRecording">
            <summary>
            Starts recording
            </summary>
        </member>
        <member name="T:VOCASY.Common.VoiceDataManipulator">
            <summary>
            Class that converts audio data formats to game packet.
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceDataManipulator.AvailableTypes">
            <summary>
            Audio data formats that this class can process
            </summary>
        </member>
        <member name="M:VOCASY.Common.VoiceDataManipulator.FromAudioDataToPacket(System.Single[],System.Int32,System.Int32,VOCASY.VoicePacketInfo@,GENUtility.BytePacket)">
            <summary>
            Processes audio data in format Single into a GamePacket
            </summary>
            <param name="audioData">audio data to process</param>
            <param name="audioDataOffset">audio data startIndex</param>
            <param name="audioDataCount">number of bytes to process</param>
            <param name="info">data info</param>
            <param name="output">gamepacket on which data will be written</param>
        </member>
        <member name="M:VOCASY.Common.VoiceDataManipulator.FromAudioDataToPacketInt16(System.Byte[],System.Int32,System.Int32,VOCASY.VoicePacketInfo@,GENUtility.BytePacket)">
            <summary>
            Processes audio data in format Int16 into a GamePacket
            </summary>
            <param name="audioData">audio data to process</param>
            <param name="audioDataOffset">audio data startIndex</param>
            <param name="audioDataCount">number of bytes to process</param>
            <param name="info">data info</param>
            <param name="output">gamepacket on which data will be written</param>
        </member>
        <member name="M:VOCASY.Common.VoiceDataManipulator.FromPacketToAudioData(GENUtility.BytePacket,VOCASY.VoicePacketInfo@,System.Single[],System.Int32,System.Int32@)">
            <summary>
            Processes a Gamepacket into audio data in format Single
            </summary>
            <param name="packet">GamePacket to process</param>
            <param name="info">data info</param>
            <param name="out_audioData">output array on which data will be written</param>
            <param name="out_audioDataOffset">output array start index</param>
            <param name="dataCount">total number of bytes written</param>
        </member>
        <member name="M:VOCASY.Common.VoiceDataManipulator.FromPacketToAudioDataInt16(GENUtility.BytePacket,VOCASY.VoicePacketInfo@,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Processes a Gamepacket into audio data in format Int16
            </summary>
            <param name="packet">GamePacket to process</param>
            <param name="info">data info</param>
            <param name="out_audioData">output array on which data will be written</param>
            <param name="out_audioDataOffset">output array start index</param>
            <param name="dataCount">total number of bytes written</param>
        </member>
        <member name="T:VOCASY.Common.VoiceDataTransport">
            <summary>
            Class that manages the voice packets received/sent
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceDataTransport.MaxDataLength">
            <summary>
            Max data length that should be sent to this class
            </summary>
        </member>
        <member name="F:VOCASY.Common.VoiceDataTransport.Workflow">
            <summary>
            Voice chat workflow
            </summary>
        </member>
        <member name="M:VOCASY.Common.VoiceDataTransport.ProcessReceivedData(GENUtility.BytePacket,System.Byte[],System.Int32,System.Int32,System.UInt64)">
            <summary>
            Process packet data
            </summary>
            <param name="buffer">GamePacket of which data will be stored</param>
            <param name="dataReceived">Raw data received from network</param>
            <param name="startIndex">Raw data start index</param>
            <param name="length">Raw data length</param>
            <param name="netId">Sender net id</param>
            <returns>data info</returns>
        </member>
        <member name="M:VOCASY.Common.VoiceDataTransport.SendToAllOthers(GENUtility.BytePacket,VOCASY.VoicePacketInfo)">
            <summary>
            Sends a packet to all the other clients
            </summary>
            <param name="data">GamePacket that stores the data to send</param>
            <param name="info">data info</param>
        </member>
        <member name="M:VOCASY.Common.VoiceDataTransport.SendTo(GENUtility.BytePacket,VOCASY.VoicePacketInfo,System.UInt64)">
            <summary>
            Sends a packet to another client
            </summary>
            <param name="data">GamePacket that stores the data to send</param>
            <param name="info">data info</param>
            <param name="receiverID">Receiver to which the packet should be sent</param>
        </member>
        <member name="T:VOCASY.Common.VoidManipulator">
            <summary>
            Class that converts audio data formats to game packet. Performs no other actions and no compression, it should be used only for tests and debug
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoidManipulator.AvailableTypes">
            <summary>
            Audio data formats that this class can process
            </summary>
        </member>
        <member name="M:VOCASY.Common.VoidManipulator.FromAudioDataToPacket(System.Single[],System.Int32,System.Int32,VOCASY.VoicePacketInfo@,GENUtility.BytePacket)">
            <summary>
            Processes audio data in format Single into a GamePacket
            </summary>
            <param name="audioData">audio data to process</param>
            <param name="audioDataOffset">audio data startIndex</param>
            <param name="audioDataCount">number of bytes to process</param>
            <param name="info">data info</param>
            <param name="output">gamepacket on which data will be written</param>
        </member>
        <member name="M:VOCASY.Common.VoidManipulator.FromAudioDataToPacketInt16(System.Byte[],System.Int32,System.Int32,VOCASY.VoicePacketInfo@,GENUtility.BytePacket)">
            <summary>
            Processes audio data in format Int16 into a GamePacket
            </summary>
            <param name="audioData">audio data to process</param>
            <param name="audioDataOffset">audio data startIndex</param>
            <param name="audioDataCount">number of bytes to process</param>
            <param name="info">data info</param>
            <param name="output">gamepacket on which data will be written</param>
        </member>
        <member name="M:VOCASY.Common.VoidManipulator.FromPacketToAudioData(GENUtility.BytePacket,VOCASY.VoicePacketInfo@,System.Single[],System.Int32,System.Int32@)">
            <summary>
            Processes a Gamepacket into audio data in format Single
            </summary>
            <param name="packet">GamePacket to process</param>
            <param name="info">data info</param>
            <param name="out_audioData">output array on which data will be written</param>
            <param name="out_audioDataOffset">output array start index</param>
            <param name="dataCount">total number of bytes written</param>
        </member>
        <member name="M:VOCASY.Common.VoidManipulator.FromPacketToAudioDataInt16(GENUtility.BytePacket,VOCASY.VoicePacketInfo@,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Processes a Gamepacket into audio data in format Int16
            </summary>
            <param name="packet">GamePacket to process</param>
            <param name="info">data info</param>
            <param name="out_audioData">output array on which data will be written</param>
            <param name="out_audioDataOffset">output array start index</param>
            <param name="dataCount">total number of bytes written</param>
        </member>
        <member name="T:VOCASY.Common.VoiceChatSettings">
            <summary>
            Class that manages and holds voice chat settings
            </summary>
        </member>
        <member name="T:VOCASY.Common.VoiceChatSettings.OnSettingChanged">
            <summary>
            Delegate used on some settings changed
            </summary>
        </member>
        <member name="T:VOCASY.Common.VoiceChatSettings.OnFrequencyChanged">
            <summary>
            Delegate used on event AudioQualityChanged
            </summary>
            <param name="previousFrequency">previous frequency value</param>
        </member>
        <member name="T:VOCASY.Common.VoiceChatSettings.OnMicDeviceChanged">
            <summary>
            Delegate used on event MicrophoneDeviceChanged
            </summary>
            <param name="previousDevice">previous device name</param>
        </member>
        <member name="F:VOCASY.Common.VoiceChatSettings.MinFrequency">
            <summary>
            Minimum frequency possible
            </summary>
        </member>
        <member name="F:VOCASY.Common.VoiceChatSettings.MaxFrequency">
            <summary>
            Maximum frequency possible
            </summary>
        </member>
        <member name="F:VOCASY.Common.VoiceChatSettings.MinChannels">
            <summary>
            Minimum frequency possible
            </summary>
        </member>
        <member name="F:VOCASY.Common.VoiceChatSettings.MaxChannels">
            <summary>
            Maximum frequency possible
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceChatSettings.FolderName">
            <summary>
            Name of the folder used to store files
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceChatSettings.SettingsFileName">
            <summary>
            Name of the file used to store settings
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceChatSettings.SavedCustomValuesPath">
            <summary>
            File complete path name that contains saved settings.
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceChatSettings.SavedCustomValuesDirectoryPath">
            <summary>
            Directory full path that contains files.
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceChatSettings.MuteSelf">
            <summary>
            Determines whenever self should be muted
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceChatSettings.PushToTalk">
            <summary>
            Determines if voice chat works in mode push to talk
            </summary>
        </member>
        <member name="F:VOCASY.Common.VoiceChatSettings.PushToTalkKey">
            <summary>
            Key used in push to talk mode
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceChatSettings.AudioQuality">
            <summary>
            Audio quality used. Does not effect audio received from network
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceChatSettings.MicrophoneDevice">
            <summary>
            Current microphone device to be used for recording
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceChatSettings.VoiceChatEnabled">
            <summary>
            Determines whenever voice chat shoul dbe enabled
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceChatSettings.VoiceChatVolume">
            <summary>
            Determines volume of voice chat data received from network
            </summary>
        </member>
        <member name="E:VOCASY.Common.VoiceChatSettings.PushToTalkChanged">
            <summary>
            Event called whenever push to talk mode has been changed
            </summary>
        </member>
        <member name="E:VOCASY.Common.VoiceChatSettings.MuteSelfChanged">
            <summary>
            Event called whenever MuteSelf state has been changed
            </summary>
        </member>
        <member name="E:VOCASY.Common.VoiceChatSettings.AudioQualityChanged">
            <summary>
            Event called whenever Audio Quality value has been changed , previous audio quality is passed as argument
            </summary>
        </member>
        <member name="E:VOCASY.Common.VoiceChatSettings.MicrophoneDeviceChanged">
            <summary>
            Event called whenever the current microphone device has been changed, previous mic device is passed as argument
            </summary>
        </member>
        <member name="E:VOCASY.Common.VoiceChatSettings.VoiceChatEnabledChanged">
            <summary>
            Event called whenever Voice Chat enbaled state has been changed
            </summary>
        </member>
        <member name="M:VOCASY.Common.VoiceChatSettings.RestoreToSavedSettings">
            <summary>
            Restore the settings to the saved file values. If file is not found it is created with current settings values
            </summary>
        </member>
        <member name="M:VOCASY.Common.VoiceChatSettings.SaveCurrentSettings">
            <summary>
            Saves current settings to file. If it is not performed changes to the settings will not be recorded
            </summary>
        </member>
        <member name="T:VOCASY.Common.VoiceHandler">
            <summary>
            Class that handles voice input/output
            </summary>
        </member>
        <member name="F:VOCASY.Common.VoiceHandler.Workflow">
            <summary>
            Voice chat workflow
            </summary>
        </member>
        <member name="F:VOCASY.Common.VoiceHandler.Receiver">
            <summary>
            Output source
            </summary>
        </member>
        <member name="F:VOCASY.Common.VoiceHandler.Recorder">
            <summary>
            Input source
            </summary>
        </member>
        <member name="F:VOCASY.Common.VoiceHandler.Identity">
            <summary>
            The INetworkIdentity associated with this object
            </summary>
        </member>
        <member name="F:VOCASY.Common.VoiceHandler.IsSelfOutputMuted">
            <summary>
            Mute condition specific for this output source
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceHandler.IsRecorder">
            <summary>
            True if this handler is recording input
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceHandler.IsOutputMuted">
            <summary>
            Is output source muted?
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceHandler.SelfOutputVolume">
            <summary>
            Volume specific for this output source
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceHandler.OutputVolume">
            <summary>
            Effective volume of this output source
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceHandler.AvailableTypes">
            <summary>
            Flag that determines which types of data format this class can process
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceHandler.IsInitialized">
            <summary>
            True if VoiceHandler has initialized correctly
            </summary>
        </member>
        <member name="M:VOCASY.Common.VoiceHandler.GetMicData(System.Single[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets recorded data and stores it in format Single
            </summary>
            <param name="buffer">buffer to fill with audio data recorded</param>
            <param name="bufferOffset">buffer start index</param>
            <param name="micDataCount">amount of data to store</param>
            <param name="effectiveMicDataCount">effective amount of data stored</param>
            <returns>data info</returns>
        </member>
        <member name="M:VOCASY.Common.VoiceHandler.GetMicDataInt16(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets recorded data and stores it in format Int16
            </summary>
            <param name="buffer">buffer to fill with audio data recorded</param>
            <param name="bufferOffset">buffer start index</param>
            <param name="micDataCount">amount of data to store</param>
            <param name="effectiveMicDataCount">effective amount of data stored</param>
            <returns>data info</returns>
        </member>
        <member name="M:VOCASY.Common.VoiceHandler.ReceiveAudioData(System.Single[],System.Int32,System.Int32,VOCASY.VoicePacketInfo)">
            <summary>
            Processes audio data in format Single and plays it
            </summary>
            <param name="audioData">audio data to process</param>
            <param name="audioDataOffset">audio data start index</param>
            <param name="audioDataCount">audio data amount to process</param>
            <param name="info">data info</param>
        </member>
        <member name="M:VOCASY.Common.VoiceHandler.ReceiveAudioDataInt16(System.Byte[],System.Int32,System.Int32,VOCASY.VoicePacketInfo)">
            <summary>
            Processes audio data in format Int16 and plays it
            </summary>
            <param name="audioData">audio data to process</param>
            <param name="audioDataOffset">audio data start index</param>
            <param name="audioDataCount">audio data amount to process</param>
            <param name="info">data info</param>
        </member>
        <member name="T:VOCASY.Common.NetworkIdentity">
            <summary>
            Class that represents an object which will be treated as unique on the nerwork
            </summary>
        </member>
        <member name="F:VOCASY.Common.NetworkIdentity.NetworkId">
            <summary>
            Unique network id that identifies this specific object in the network. This value should not change
            </summary>
        </member>
        <member name="F:VOCASY.Common.NetworkIdentity.IsLocalPlayer">
            <summary>
            True if this object is owned by the local player. This value should not change
            </summary>
        </member>
        <member name="F:VOCASY.Common.NetworkIdentity.IsInitialized">
            <summary>
            True if INetworkIdentity has been set correctly
            </summary>
        </member>
        <member name="T:VOCASY.Common.VoiceReceiver">
            <summary>
            A class that manages audio output
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceReceiver.Volume">
            <summary>
            Volume specific for this output source
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceReceiver.AvailableTypes">
            <summary>
            Flag that determines which types of data format this class can process
            </summary>
        </member>
        <member name="M:VOCASY.Common.VoiceReceiver.ReceiveAudioData(System.Single[],System.Int32,System.Int32,VOCASY.VoicePacketInfo)">
            <summary>
            Processes audio data in format Single and plays it
            </summary>
            <param name="audioData">audio data to process</param>
            <param name="audioDataOffset">audio data start index</param>
            <param name="audioDataCount">audio data amount to process</param>
            <param name="info">data info</param>
        </member>
        <member name="M:VOCASY.Common.VoiceReceiver.ReceiveAudioData(System.Byte[],System.Int32,System.Int32,VOCASY.VoicePacketInfo)">
            <summary>
            Processes audio data in format Int16 and plays it
            </summary>
            <param name="audioData">audio data to process</param>
            <param name="audioDataOffset">audio data start index</param>
            <param name="audioDataCount">audio data amount to process</param>
            <param name="info">data info</param>
        </member>
        <member name="T:VOCASY.Common.VoiceRecorder">
            <summary>
            A class that manages audio input
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceRecorder.AvailableTypes">
            <summary>
            Flag that determines which types of data format this class can process
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceRecorder.IsEnabled">
            <summary>
            Is this input recording?
            </summary>
        </member>
        <member name="P:VOCASY.Common.VoiceRecorder.MicDataAvailable">
            <summary>
            Amount of mic data recorded currently available
            </summary>
        </member>
        <member name="M:VOCASY.Common.VoiceRecorder.GetMicData(System.Single[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets recorded data and stores it in format Single
            </summary>
            <param name="buffer">buffer to fill with audio data recorded</param>
            <param name="bufferOffset">buffer start index</param>
            <param name="maxDataCount">max amount of data to store</param>
            <param name="effectiveDataCount">effective amount of data stored</param>
            <returns>data info</returns>
        </member>
        <member name="M:VOCASY.Common.VoiceRecorder.GetMicData(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets recorded data and stores it in format Int16
            </summary>
            <param name="buffer">buffer to fill with audio data recorded</param>
            <param name="bufferOffset">buffer start index</param>
            <param name="maxDataCount">max amount of data to store</param>
            <param name="effectiveDataCount">effective amount of data stored</param>
            <returns>data info</returns>
        </member>
        <member name="M:VOCASY.Common.VoiceRecorder.StartRecording">
            <summary>
            Starts recording
            </summary>
        </member>
        <member name="M:VOCASY.Common.VoiceRecorder.StopRecording">
            <summary>
            Stops recording
            </summary>
        </member>
        <member name="T:VOCASY.Common.VoiceDataWorkflow">
            <summary>
            Class that manages the workflow of audio data from input to output
            </summary>
        </member>
        <member name="F:VOCASY.Common.VoiceDataWorkflow.Settings">
            <summary>
            Voice chat settings
            </summary>
        </member>
        <member name="F:VOCASY.Common.VoiceDataWorkflow.Manipulator">
            <summary>
            Manipulator used
            </summary>
        </member>
        <member name="F:VOCASY.Common.VoiceDataWorkflow.Transport">
            <summary>
            Transport used
            </summary>
        </member>
        <member name="M:VOCASY.Common.VoiceDataWorkflow.AddVoiceHandler(VOCASY.Common.VoiceHandler)">
            <summary>
            Adds the handler. Handler should already be initialized before calling this method
            </summary>
            <param name="handler">handler to add</param>
        </member>
        <member name="M:VOCASY.Common.VoiceDataWorkflow.RemoveVoiceHandler(VOCASY.Common.VoiceHandler)">
            <summary>
            Removes the handler
            </summary>
            <param name="handler">handler to remove</param>
        </member>
        <member name="M:VOCASY.Common.VoiceDataWorkflow.ProcessReceivedPacket(System.Byte[],System.Int32,System.Int32,System.UInt64)">
            <summary>
            Process the received packet data.
            </summary>
            <param name="receivedData">received raw data</param>
            <param name="startIndex">received raw data start index</param>
            <param name="length">received raw data length</param>
            <param name="netId">sender net id</param>
        </member>
        <member name="M:VOCASY.Common.VoiceDataWorkflow.ProcessMicData(VOCASY.Common.VoiceHandler)">
            <summary>
            Processes mic data from the given handler
            </summary>
            <param name="handler">handler which has available mic data</param>
        </member>
        <member name="T:VOCASY.FrequencyType">
            <summary>
            Enum that holds most common frequencies used
            </summary>
        </member>
        <member name="F:VOCASY.FrequencyType.LowerThanAverageQuality">
            <summary>
            Low end frequency quality
            </summary>
        </member>
        <member name="F:VOCASY.FrequencyType.VoipQuality">
            <summary>
            Normal frequency quality
            </summary>
        </member>
        <member name="F:VOCASY.FrequencyType.AboveAverageQuality">
            <summary>
            Above normal frequency quality
            </summary>
        </member>
        <member name="F:VOCASY.FrequencyType.HighQuality">
            <summary>
            High frequency quality
            </summary>
        </member>
        <member name="F:VOCASY.FrequencyType.BestQuality">
            <summary>
            Best frequency quality
            </summary>
        </member>
        <member name="T:VOCASY.VoicePacketInfo">
            <summary>
            Data structure that stores various data to identify the status of an audio packet
            </summary>
        </member>
        <member name="F:VOCASY.VoicePacketInfo.InvalidPacket">
            <summary>
            Invalid packet
            </summary>
        </member>
        <member name="F:VOCASY.VoicePacketInfo.NetId">
            <summary>
            Network Id of the audio owner
            </summary>
        </member>
        <member name="F:VOCASY.VoicePacketInfo.Frequency">
            <summary>
            Frequency at which data is stored
            </summary>
        </member>
        <member name="F:VOCASY.VoicePacketInfo.Channels">
            <summary>
            Channels at which data is stored
            </summary>
        </member>
        <member name="F:VOCASY.VoicePacketInfo.ValidPacketInfo">
            <summary>
            Is the packet valid ? false if there are problems
            </summary>
        </member>
        <member name="F:VOCASY.VoicePacketInfo.Format">
            <summary>
            Format of the stored data
            </summary>
        </member>
        <member name="M:VOCASY.VoicePacketInfo.#ctor(System.UInt64,System.UInt16,System.Byte,VOCASY.AudioDataTypeFlag,System.Boolean)">
            <summary>
            Create a new struct instance
            </summary>
            <param name="netId">packet netid</param>
            <param name="frequency">audio frequency</param>
            <param name="channels">audio channels</param>
            <param name="format">audio format</param>
            <param name="valid">is packet valid?</param>
        </member>
    </members>
</doc>
